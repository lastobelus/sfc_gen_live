
sfc.gen.live:
  ✔ refactor a generated live resource to Surface @done(2021-04-08 22:05)
  ☐ review and think about choices
  ☐ extract/abstract form component?
  ☐ review documentation on creating a hex package
  ✔ create repo @done(2021-04-08 22:05)
  ✔ mix new @done(2021-04-08 22:05)
  ☐ setup hex package
  ✔ create helloworld sfc.gen.live mix task @done(2021-04-08 23:21)
  ✔ include hex package in an app @done(2021-04-08 23:21)
  ✔ test helloworld @done(2021-04-08 23:21)
  ✔ cp phx.gen.live code into hex package and get it working with as little copied code as possible @done(2021-04-08 23:21)
    ✔ i.e., delegate as much as possible from the phx.gen.live task to phoenix @done(2021-04-08 23:22)
    ✔ works, but need to copy from v1.5.8 instead of master @done(2021-04-16 22:48)
  ✔ rename to sfc.gen.live @done(2021-04-08 23:22)
  ✔ setup the sfc.gen.live templates @done(2021-04-16 22:48)
  ✔ refactor phx.gen.live -> sfc.gen.live @done(2021-04-16 22:48)
    ✔ inject `surface_view` and `surface_component` in `lib/my_app_web.ex` @done(2021-04-09 21:31)
    ✔ modal component @done(2021-04-16 22:48)
    ✔ form component @done(2021-04-16 22:48)
    ✔ show @done(2021-04-16 22:48)
      ✔ view @done(2021-04-16 22:48)
      ✔ template @done(2021-04-16 22:48)
    ✔ index @done(2021-04-16 22:48)
      ✔ view @done(2021-04-16 22:48)
      ✔ template @done(2021-04-16 22:48)
✔ @done(2021-04-16 22:48)

  ✔ tests @done(2021-04-16 22:48)
    ✔ copy tests from phx.gen.live and adapt @done(2021-04-16 22:48)

  split into v1.5.8 and master:
    ✔ branch phoenix_1.5.8 @done(2021-04-16 22:50)
    ✔ branch lib_test_app also @done(2021-04-16 22:58)
    ✔ update sfc_gen_live@@master to phoenix@master @done(2021-04-16 23:40)
    had to use a path dependency for phx_new since its source is a directory in phoenix
    ✔ run tests to see if anything breaks @done(2021-04-16 23:42)
    the tests in sfc_gen_live using phoenix@master & phx_new@master all pass! But I will go ahead and factor in the changes from master anyway.
    ✔ generate lib_test_app in phoenix/installer @done(2021-04-16 23:16)
    ✔ diff phoenix master->v1.5.8 and incorporate changes @done(2021-04-18 01:08)
      ✔ template @done(2021-04-18 01:08)
      ✔ phx.gen.live.ex @done(2021-04-18 01:08)
      ✔ phx_gen_live_test.ex @done(2021-04-18 01:08)
    ✔ test in test app @done(2021-04-18 04:42)
      ✔ re-setup lib_test_app in phoenix/installer (didn't do --live first time) @done(2021-04-18 04:42)
      ✔ run `mix sfc.gen.live Blog Post posts title slug:unique votes:integer cost:decimal tags:array:text popular:boolean drafted_at:datetime status:enum:unpublished:published:deleted published_at:utc_datetime published_at_usec:utc_datetime_usec deleted_at:naive_datetime deleted_at_usec:naive_datetime_usec secret:uuid announcement_date:date weight:float` @done(2021-04-18 04:42)
      ✔ make sure generated test runs @done(2021-04-18 04:42)
      tags fails, but it does on phx.gen.live too.
      ✔ run app and inspect generated form @done(2021-04-18 04:42)

  docs:
    ☐ document how to develop
      setup test app in phoenix/installer
      reset test app:
        `git reset --hard HEAD; git clean -fd; mix deps.get; mix deps.compile; mix ecto.reset; MIX_ENV=test mix ecto.reset`
    ☐ write blog post showing & explaining the generated pieces

sfc.gen.init:
  ✔ factor duplicate code between generators into SfcGenLive @done(2021-04-20 21:48)
  ✔ inject in .formatter.exs @done(2021-04-23 02:36)
  ✔ inject in dev/config @done(2021-04-23 02:36)
  ✔ inject in lib/my_app_web.ex#view @done(2021-04-23 02:36)
  ✔ add demo component: card with a slot @done(2021-04-24 22:10)
    ✔ start by making a test and inspecting what currently gets set in the assigns @done(2021-04-24 22:10)
  ✔ tests @done(2021-04-24 22:10)

phx.gen.live:
  ☐ report bug with `mix phx.gen.live Blog Post posts title alarm:time`
  ☐ check if mix sfc.gen.live Blog Post posts title tags:array:text results in failing test OOB
  generated test looks for `select name="post[alarm]"` but generated form builds a time control with two selects for hour, minute

sfc.gen.design:
  ✔ create branch, tracking surface-next branch of surface @done(2021-05-03 20:22)
  ✔ generate sfc.gen.design with mo.gen.gen @done(2021-05-03 20:22)
  ☐ get helloworld vesion working, that parses `<Hello/>` and spits out `sfc.gen.component hello`
  ☐ test of helloworld version, including inception
  handling slots:
    component with default slot and dummy content
      - none of the (recursive) children are components or templates
      - save the dummy content to add to the component template
    component with <:slot_name></:slot_name>
      - named slot
      - can set `required` like this: <:header required="true"></:header>
    component with typed slot <Card><Card.Header slot="header"></Card.Header>
      -or- <Card><Card.Header></Card.Header> always assume a component with a namespace same as parent indicates a typed slot (but what if you have a slot that can hold more than one typed slotable?)
      -or- <Card><:header><Card.Header>...</Card.Header></:header></Card> this assumes that a namespaced component as sole child of a template is a typed slotable for that slot
   to parse, we need to hold the current generator(s) in a context, so that if we see templates/slotables we can add to the slots of the component they are in


